class Obstacle 
{
    field Position CurrentPosition;
    field int Type;
    field int SpawnTick;
    field int size;

    constructor Obstacle new(Position startPosition, int type, int tick)
    {
        let CurrentPosition = startPosition;
        let Type = type;
        let SpawnTick = tick;
        if (Type = 0)
        {
            let size = 30;
        }
        if (Type = 1)
        {
            let size = 28;
        }
        if (Type = 2)
        {
            let size = 27;
        }

        return this;
    }

    method void PrintThisObstacle() 
    {
        var int location;
        let location = CurrentPosition.GetLocation();
        do ObstacleTexture.PrintObstacle(location, Type);

        return; //Избыточные return в void-методах
    }

    method void EraseObstacle() 
    {
        var int location;
        let location = CurrentPosition.GetLocation();
        do ObstacleTexture.EraseObstacle(location, Type);

        return; //Избыточные return в void-методах
    }

    method void ChangePositionForTickTime()
    {
        do CurrentPosition.VectorChangePosition(0, 8);

        return; //Избыточные return в void-методах
    }

    method Position GetCurrentPosition()
    {
        return CurrentPosition;
    }

    method int GetType()
    {
        return Type;
    }

    method int GetSize()
    {
        return size;
    }

    method int GetSpawnTick()
    {
        return SpawnTick;
    }

    method void dispose()
    {
        do Memory.deAlloc(this);

        return; //Избыточные return в void-методах
    }
}
