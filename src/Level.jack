class Level
{
    field Fibonacci fibonacci;
    field int Tick;
    field int lastLine;

    constructor Level new()
    {
        let fibonacci = Fibonacci.new();
        let Tick = 0;
        let lastLine = 1;

        return this;
    }

    method Array CreateLevel(int size, int speed)
    {
        var Array returnArray;
        var Obstacle obstacle;
        var int i; 
        let i = 0;
        let returnArray = Array.new(size);
        while (i < size)
        {
            let obstacle = GenerateNewObstacle(speed, i);
            let returnArray[i] = obstacle;
            let i = i + 1;
        }

        return returnArray;
    }

    method void SetTick(int tick)
    {
        let Tick = tick;

        return; //Избыточные return в void-методах
    }

    method Obstacle GenerateNewObstacle(int speed, int seed)
    {
        var Obstacle obstacle;
        var int temp;
        var Position startPosition;
        var int currentLine;
        let temp = fibonacci.GetNextValue() + 5;
        let currentLine = MathExtension.mod(temp, 3);
        let Tick = Tick + MathExtension.mod(temp, speed * 2 / 3);
        if (currentLine = lastLine)
        {
            let currentLine = MathExtension.mod(lastLine + 1, 3);
        }
        let startPosition = Position.new(currentLine * 48 + 192, 0);
        let obstacle = Obstacle.new(startPosition, MathExtension.mod(temp * 2 - 1, 3), Tick + (seed * 3));
        let lastLine = currentLine;

        return obstacle;
    }
    
    method void dispose()
    {
        do Memory.deAlloc(this);

        return; //Избыточные return в void-методах
    }
}
