class ObstacleTexture 
{
    function void PrintObstacle (int location, int type) 
    {
        if (type = 0)
        {
            do ObstacleTexture.PrintVariant0(location);
        }

        if (type = 1)
        {
            do ObstacleTexture.PrintVariant1(location);
        }

        if (type = 2)
        {
            do ObstacleTexture.PrintVariant2(location);
        }

        return;
    }

    function void PrintVariant0(int location) 
    {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +64, 0);
        do Memory.poke(memAddress +96, ~32767);
        do Memory.poke(memAddress +128, 16384);
        do Memory.poke(memAddress +160, 8192);
        do Memory.poke(memAddress +192, 4096);
        do Memory.poke(memAddress +224, 2048);
        do Memory.poke(memAddress +256, 10240);
        do Memory.poke(memAddress +288, 20480);
        do Memory.poke(memAddress +320, -30720);
        do Memory.poke(memAddress +352, 1024);
        do Memory.poke(memAddress +384, 512);
        do Memory.poke(memAddress +416, 13312);
        do Memory.poke(memAddress +448, 18432);
        do Memory.poke(memAddress +480, -31744);
        do Memory.poke(memAddress +512, 512);
        do Memory.poke(memAddress +544, 256);
        do Memory.poke(memAddress +576, 8320);
        do Memory.poke(memAddress +608, 23808);
        do Memory.poke(memAddress +640, -32256);
        do Memory.poke(memAddress +672, 256);
        do Memory.poke(memAddress +704, 128);
        do Memory.poke(memAddress +736, 64);
        do Memory.poke(memAddress +768, 64);
        do Memory.poke(memAddress +800, 128);
        do Memory.poke(memAddress +832, 14592);
        do Memory.poke(memAddress +864, -14848);
        do Memory.poke(memAddress +896, ~32767);
        do Memory.poke(memAddress +928, ~32767);
        // column 1
        do Memory.poke(memAddress +1, 0);
        do Memory.poke(memAddress +33, 0);
        do Memory.poke(memAddress +65, 1);
        do Memory.poke(memAddress +97, 2);
        do Memory.poke(memAddress +129, 4);
        do Memory.poke(memAddress +161, 8);
        do Memory.poke(memAddress +193, 16);
        do Memory.poke(memAddress +225, 32);
        do Memory.poke(memAddress +257, 44);
        do Memory.poke(memAddress +289, 19);
        do Memory.poke(memAddress +321, 32);
        do Memory.poke(memAddress +353, 64);
        do Memory.poke(memAddress +385, 128);
        do Memory.poke(memAddress +417, 90);
        do Memory.poke(memAddress +449, 37);
        do Memory.poke(memAddress +481, 64);
        do Memory.poke(memAddress +513, 128);
        do Memory.poke(memAddress +545, 256);
        do Memory.poke(memAddress +577, 520);
        do Memory.poke(memAddress +609, 308);
        do Memory.poke(memAddress +641, 195);
        do Memory.poke(memAddress +673, 256);
        do Memory.poke(memAddress +705, 512);
        do Memory.poke(memAddress +737, 1024);
        do Memory.poke(memAddress +769, 1024);
        do Memory.poke(memAddress +801, 512);
        do Memory.poke(memAddress +833, 284);
        do Memory.poke(memAddress +865, 227);
        do Memory.poke(memAddress +897, 1);
        do Memory.poke(memAddress +929, 1);

        return;
    }

    function void PrintVariant1(int location) 
    {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress +352, 3968);
        do Memory.poke(memAddress +384, -3904);
        do Memory.poke(memAddress +416, 14368);
        do Memory.poke(memAddress +448, -18024);
        do Memory.poke(memAddress +480, 412);
        do Memory.poke(memAddress +512, -16364);
        do Memory.poke(memAddress +544, -29142);
        do Memory.poke(memAddress +576, 3758);
        do Memory.poke(memAddress +608, -28498);
        do Memory.poke(memAddress +640, -1750);
        do Memory.poke(memAddress +672, 4950);
        do Memory.poke(memAddress +704, 9559);
        do Memory.poke(memAddress +736, 26953);
        do Memory.poke(memAddress +768, -11642);
        do Memory.poke(memAddress +800, -7552);
        do Memory.poke(memAddress +832, 1920);
        do Memory.poke(memAddress +864, 1792);
        // column 1
        do Memory.poke(memAddress +193, 768);
        do Memory.poke(memAddress +225, 640);
        do Memory.poke(memAddress +257, 2016);
        do Memory.poke(memAddress +289, 6232);
        do Memory.poke(memAddress +321, 9604);
        do Memory.poke(memAddress +353, 16674);
        do Memory.poke(memAddress +385, -7987);
        do Memory.poke(memAddress +417, -8179);
        do Memory.poke(memAddress +449, 32563);
        do Memory.poke(memAddress +481, 152);
        do Memory.poke(memAddress +513, 65);
        do Memory.poke(memAddress +545, 93);
        do Memory.poke(memAddress +577, 140);
        do Memory.poke(memAddress +609, 225);
        do Memory.poke(memAddress +641, 315);
        do Memory.poke(memAddress +673, 714);
        do Memory.poke(memAddress +705, 3338);
        do Memory.poke(memAddress +737, 7700);
        do Memory.poke(memAddress +769, 7188);
        do Memory.poke(memAddress +801, 60);
        do Memory.poke(memAddress +833, 56);
        do Memory.poke(memAddress +865, 0);

        return;
    }

    function void PrintVariant2(int location) 
    {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +64, 3840);
        do Memory.poke(memAddress +96, 4224);
        do Memory.poke(memAddress +128, 8256);
        do Memory.poke(memAddress +160, -7776);
        do Memory.poke(memAddress +192, 544);
        do Memory.poke(memAddress +224, 544);
        do Memory.poke(memAddress +256, 288);
        do Memory.poke(memAddress +288, 192);
        do Memory.poke(memAddress +320, 7296);
        do Memory.poke(memAddress +352, 9856);
        do Memory.poke(memAddress +384, 9792);
        do Memory.poke(memAddress +416, 14912);
        do Memory.poke(memAddress +448, 7408);
        do Memory.poke(memAddress +480, 64);
        do Memory.poke(memAddress +512, 192);
        do Memory.poke(memAddress +544, 112);
        do Memory.poke(memAddress +576, 8320);
        do Memory.poke(memAddress +608, -16256);
        do Memory.poke(memAddress +640, 4224);
        do Memory.poke(memAddress +672, 8320);
        do Memory.poke(memAddress +704, 9344);
        do Memory.poke(memAddress +736, 6272);
        do Memory.poke(memAddress +768, 256);
        do Memory.poke(memAddress +800, -896);
        do Memory.poke(memAddress +832, 768);
        // column 1
        do Memory.poke(memAddress +1, 0);
        do Memory.poke(memAddress +33, 0);
        do Memory.poke(memAddress +65, 480);
        do Memory.poke(memAddress +97, 528);
        do Memory.poke(memAddress +129, 1032);
        do Memory.poke(memAddress +161, 2831);
        do Memory.poke(memAddress +193, 2176);
        do Memory.poke(memAddress +225, 2176);
        do Memory.poke(memAddress +257, 2304);
        do Memory.poke(memAddress +289, 1536);
        do Memory.poke(memAddress +321, 624);
        do Memory.poke(memAddress +353, 712);
        do Memory.poke(memAddress +385, 1224);
        do Memory.poke(memAddress +417, 1208);
        do Memory.poke(memAddress +449, 7792);
        do Memory.poke(memAddress +481, 1025);
        do Memory.poke(memAddress +513, 1536);
        do Memory.poke(memAddress +545, 7168);
        do Memory.poke(memAddress +577, 521);
        do Memory.poke(memAddress +609, 774);
        do Memory.poke(memAddress +641, 528);
        do Memory.poke(memAddress +673, 520);
        do Memory.poke(memAddress +705, 584);
        do Memory.poke(memAddress +737, 560);
        do Memory.poke(memAddress +769, 256);
        do Memory.poke(memAddress +801, 639);
        do Memory.poke(memAddress +833, 384);

        return;
    }

    function void EraseObstacle(int location, int Type)
    {
        var int i;
        var int max;
        var int memAddress; 
        let memAddress = 16384+location;
        let i = 0;
        if (Type = 0)
        {
            let max = 30;
        }
        if (Type = 1)
        {
            let max = 28;
        }
        if (Type = 2)
        {
            let max = 27;
        }
        while (i < max)
        {
            do Memory.poke(memAddress + (32 * i), 0);
            do Memory.poke(memAddress + (32 * i) + 1, 0);
            let i = i + 1;
        }
        
        return;
    }
}