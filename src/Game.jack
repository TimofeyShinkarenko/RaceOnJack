class Game
{
    field Score CurrentScore;
    field Car MyCar;
    field Array Obstacles;
    field int CurrentTick;
    field int TickTime;
    field int MinTickTime;
    field int NumberOfObstacles;
    field Position StartPosition;
    field int BaseSpeed;
    field int SpeedCoefficient;
    field Level LevelGenerator;
    field int currentSpeed;
    field Top TopScores;
    field int NotSpawnTimer;

    constructor Game new(Top topScores)
    {
        let TickTime = 500;
        let CurrentScore = Score.new();
        let CurrentTick = 0;
        let MinTickTime = 100;
        let NumberOfObstacles = 5;
        let BaseSpeed = 30; 
        let SpeedCoefficient = 2; 
        let currentSpeed = BaseSpeed;
        let NotSpawnTimer = 10;
        let StartPosition = Position.new(240, 208);
        let MyCar = Car.new(StartPosition);
        let LevelGenerator = Level.new();
        let TopScores = topScores;
        let Obstacles = Array.new(NumberOfObstacles);
        return this;
    }

    method void StartGame() 
    {
        var char pressedKey;
        let pressedKey = Keyboard.keyPressed();
        
        do Layout.PrintSplashScreen();
        while (pressedKey = 0)
        {
            let pressedKey = Keyboard.keyPressed();
        }
        do Layout.HideSplashScreen();
        do Layout.PrintField();
        do TopScores.PrintTop(1, 42);
        let Obstacles = LevelGenerator.CreateLevel(NumberOfObstacles, currentSpeed);
        return;
    }

    method boolean CheckAlive()
    {
        var boolean IsCarAlive;
        var int i;
        var Position carPosition;
        var Position obstaclePosition;
        var Obstacle obstacle;
        var Obstacle newObstacle;

        let IsCarAlive = true;
        let i = 0;
        while (i < NumberOfObstacles)
        {
            let carPosition = MyCar.GetCurrentPosition();
            let obstacle = Obstacles[i];
            let obstaclePosition = obstacle.GetCurrentPosition();
            if ((carPosition.GetY() - obstaclePosition.GetY()) < 25)
            {
                if ((carPosition.GetY() - obstaclePosition.GetY()) > -25)
                {
                    if (carPosition.GetX() = obstaclePosition.GetX())
                    {
                        return false;
                    }
                }
            }
        
            let i = i + 1;
        }

        return true;
    }

    method void MoveObstacles()
    {
        var int i;
        var Obstacle obstacle;
        var Position obstaclePosition;
        let i = 0;
        while (i < NumberOfObstacles)
        {
            let obstacle = Obstacles[i];
            let obstaclePosition = obstacle.GetCurrentPosition();
            if (obstaclePosition.GetY() > 255)
            {
                do obstacle.EraseObstacle();
                if (NotSpawnTimer < 1)
                {
                    let Obstacles[i] = LevelGenerator.GenerateNewObstacle(currentSpeed, MathExtension.mod(CurrentTick, 11));
                    let NotSpawnTimer = 10;
                }
            }
            if (obstacle.GetSpawnTick() < CurrentTick)
            {
                do obstacle.EraseObstacle();
                do obstacle.ChangePositionForTickTime();
                do obstacle.PrintThisObstacle();
            }
            let i = i + 1;
        }

        return;
    }

    method void Play()
    {
        var boolean carAlive;
        let carAlive = true;

        while (carAlive = true)
        {
            let currentSpeed = CalculateCurrentSpeed();
            do Layout.EraseCrossLines();
            do Layout.PrintCurrentState(MyCar, CurrentScore, currentSpeed, CurrentTick);
            do Sys.wait(TickTime);
            let NotSpawnTimer = NotSpawnTimer - 1;
            let CurrentTick = CurrentTick + 1;
            do LevelGenerator.SetTick(CurrentTick);
            do MoveObstacles();
            do CurrentScore.AddScoreForTickTime(currentSpeed);
            if (TickTime > MinTickTime)
            {
                let TickTime = TickTime - 18;
            }
            do MyCar.ManagedDirection();
            do MyCar.PrintCar(); 
            let carAlive = CheckAlive();
        }
        do TopScores.Add(CurrentScore);
        do Layout.PrintLoseScreen(CurrentScore);

        return;
    }

    method boolean Restart()
    {
        var char key;
        let key = Keyboard.keyPressed();
        while (true)
        {
            let key = Keyboard.keyPressed();
            if (key = 140)
            {
                return false;
            }
            if (key = 128)
            {
                do Screen.clearScreen();

                return true;
            }
        }

        return true;
    }
    
    method int CalculateCurrentSpeed()
    {
        var int currentSpeed;
        let currentSpeed = BaseSpeed + (SpeedCoefficient * (3000 / TickTime));

        return currentSpeed;
    }

    method void dispose()
    {
        do MyCar.dispose();
        do CurrentScore.dispose();
        do Obstacles.dispose();
        do StartPosition.dispose();
        do LevelGenerator.dispose();
        do Memory.deAlloc(this);
        
        return;
    }
}