class Game
{
    field Score CurrentScore;
    field Car MyCar;
    field Array Obstacls;
    field int CurrentTick;
    field int TickTime;
    field int MinTickTime;
    field int NumberOfObstacls;
    field Possition StartPossition;

    constructor Game new()
    {
        let TickTime = 1000;
        let CurrentScore = Score.new(1);
        let CurrentTick = 0;
        let MinTickTime = 100;
        let NumberOfObstacls = 10;

        let StartPossition = Possition.new(256, 128);
        let MyCar = Car.new(StartPossition);

        let Obstacls = Array.new(NumberOfObstacls);
        // Заполнить массив препятствиями

        return this;
    }


    // Ждём пока пользователь нажмёт Enter, чтобы начать игру
    method void StartGame() 
    {
        var char pressedKey;
        let pressedKey = Keyboard.keyPressed();
        
        do Layout.PrintSplashScreen();
        while (pressedKey = 0)
        {
            let pressedKey = Keyboard.keyPressed();
        }
        do Layout.HideSplashScreen();
        do Layout.PrintField();
        return;
    }

    method boolean CheckAlive()
    {
        var boolean IsCarAlive;
        var int i;
        var Possition carPosition;
        var Obstacle obstacle;

        let IsCarAlive = true;
        let i = 0;
        while (i < NumberOfObstacls)
        {

            let carPosition = MyCar.GetCurrentPossition();
            let obstacle = Obstacls[i];
            if (carPosition.Equal(obstacle.GetCurrentPossition()))
            {
                return false;
            }
            let i = i + 1;
        }

        return true;
    }

    method void MoveObstacls()
    {
        var int i;
        var Obstacle obstacle;

        let i = 0;
        while (i < NumberOfObstacls)
        {
            let obstacle = Obstacls[i];
            do obstacle.ChangePossitionForTickTime();
            let i = i + 1;
        }

        return;
    }

    method void Play()
    {
        var boolean carAlive;
        let carAlive = true;

        while (carAlive = true)
        {
            do Sys.wait(TickTime);
            do Layout.PrintCurrentState(MyCar, Obstacls, CurrentScore, NumberOfObstacls);
            do CurrentScore.AddScoreForTickTime();
            if (TickTime > MinTickTime)
            {
                let TickTime = TickTime - 50;
            }

            do MyCar.ManagedDirection();
            let carAlive = CheckAlive();
        }

        do Layout.PrintLoseScreen(CurrentScore);

        return;
    }

    method void Restart()
    {
        var char key;
        let key = Keyboard.keyPressed();
        while (key = 0)
        {
            if (key = 140)
            {
                do Sys.halt();
            }
            if (key = 128)
            {
                return;
            }
        }

        return;
    }
}